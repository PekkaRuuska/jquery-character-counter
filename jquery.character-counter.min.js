!function (t) { function a(a, o, e, n, r, c, u, l, i, h) { var f, s; n = function (t) { "INPUT" === t.prop("tagName") || "TEXTAREA" === t.prop("tagName") ? fieldValue = t.val() : fieldValue = t.text(); return fieldValue.length }(a), !0 === u && c > 0 && n > c && (n = c, s = c, "INPUT" === (f = a).prop("tagName") || "TEXTAREA" === f.prop("tagName") ? (fieldValue = f.val(), f.val(fieldValue.substring(0, s))) : (fieldValue = f.text(), f.text(fieldValue.substring(0, s)))); var g = t("[data-charcount-for=" + e + "]"); (c > 0 || r > 0) && (n > c || n < r) ? (g.data("charcount-outofrange", "true"), "" != l && g.addClass(l), i(n, r, c)) : ("true" === g.data("charcount-outofrange") && (g.removeData("charcount-outofrange"), h(n, r, c)), "" != l && g.removeClass(l)), function (a, o, e, n, r) { var c = Math.floor(r) - e, u = n - e, l = e - Math.floor(r); c < 0 && (c = 0); u < 0 && (u = 0); l < 0 && (l = 0); var i = a.replace(/\[used\]/g, e).replace(/\[under\]/g, u).replace(/\[left\]/g, c).replace(/\[over\]/g, l).replace(/\[min\]/g, n).replace(/\[max\]/g, r); t("[data-charcount-for=" + o + "]").html(i) }(o, e, n, r, c) } t.fn.characterCounter = function (o) { var e = t.extend({ minlength: 0, maxlength: 160, blockextra: !1, position: "bottom", counterclass: "character-counter-indicator", alertclass: "out-of-range", textformat: "[used]/[max]", onOutOfRange: function (t, a, o) { }, onBackToRange: function (t, a, o) { } }, o); this.each(function () { var o, n, r, c, u, l, i, h, f = t(this), s = this.dataset, g = f.attr("id"); o = void 0 !== s.charcountMinlength ? Math.floor(s.charcountMinlength) : Math.floor(e.minlength), n = void 0 !== s.charcountMaxlength ? Math.floor(s.charcountMaxlength) : Math.floor(e.maxlength), r = void 0 !== s.charcountBlockextra ? "true" === s.charcountBlockextra : e.blockextra, c = void 0 !== s.charcountPosition ? s.charcountPosition : e.position, u = void 0 !== s.charcountCounterclass ? s.charcountCounterclass : e.counterclass, l = void 0 !== s.charcountAlertclass ? s.charcountAlertclass : e.alertclass, i = void 0 !== s.charcountTextformat ? s.charcountTextformat : e.textformat; var d = '<p class="' + u + '" data-charcount-for="' + g + '"></p>'; "top" === c ? t(d).insertBefore("#" + g) : "bottom" === c ? t(d).insertAfter("#" + g) : t(c).length > 0 ? t(c).html(d) : t(d).insertAfter("#" + g), a(f, i, g, h, o, n, r, l, e.onOutOfRange, e.onBackToRange), f.on("input propertychange", function () { a(f, i, g, h, o, n, r, l, e.onOutOfRange, e.onBackToRange) }) }) } }(jQuery), $(function () { $.each($("[data-charcount-enable=true]"), function () { $(this).characterCounter() }) });